import { Transaction } from "sodiumjs";

import { DomBuilder, renderWidgetInternal } from "./builder";
import { Widget } from "./core";

export { DomEventStreamMap, Tag, Widget } from "./core";

export {
  Attribute,
  Attributes,
  TokenListMap,
  accept,
  acceptCharset,
  accessKey,
  action,
  align,
  alt,
  autocomplete,
  autofocus,
  autoplay,
  checked,
  cite,
  classList,
  className,
  colSpan,
  cols,
  contentEditable,
  controls,
  coords,
  dateTime,
  default_,
  dir,
  disabled,
  download,
  draggable,
  enctype,
  headers,
  height,
  hidden,
  href,
  hreflang,
  htmlFor,
  id,
  isMap,
  kind,
  lang,
  loop,
  max,
  maxLength,
  media,
  method,
  min,
  minLength,
  multiple,
  name,
  novalidate,
  pattern,
  ping,
  placeholder,
  poster,
  preload,
  readonly,
  rel,
  required,
  reversed,
  rows,
  rowspan,
  sandbox,
  sandboxList,
  scope,
  selected,
  setProperty,
  shape,
  size,
  spellcheck,
  src,
  srcdoc,
  srclang,
  start,
  step,
  style,
  tabIndex,
  target,
  title,
  tokens,
  tokensList,
  type,
  useMap,
  value,
  width,
  wrap,
} from "./attributes";

export { holdWidget, switchWidget } from "./combinators";

export {
  ElementCreator,
  a,
  abbr,
  address,
  applet,
  area,
  article,
  aside,
  audio,
  b,
  base,
  basefont,
  bdi,
  bdo,
  blockquote,
  body,
  br,
  button,
  canvas,
  caption,
  cite as citeEl,
  code,
  col,
  colgroup,
  data,
  datalist,
  dd,
  del,
  details,
  dfn,
  dialog,
  dir as dirEl,
  div,
  dl,
  dt,
  el,
  em,
  embed,
  fieldset,
  figcaption,
  figure,
  font,
  footer,
  form,
  frame,
  frameset,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  head,
  header,
  hgroup,
  hr,
  html,
  i,
  iframe,
  img,
  input,
  ins,
  kbd,
  label,
  legend,
  li,
  link,
  main,
  map,
  mark,
  marquee,
  menu,
  meta,
  meter,
  nav,
  noscript,
  object,
  ol,
  optgroup,
  option,
  output,
  p,
  param,
  picture,
  pre,
  progress,
  q,
  rp,
  rt,
  ruby,
  s,
  samp,
  script,
  section,
  select,
  slot,
  small,
  source,
  span,
  strong,
  style as styleEl,
  sub,
  summary,
  sup,
  table,
  tbody,
  td,
  template,
  text,
  textarea,
  tfoot,
  th,
  thead,
  time,
  title as titleEl,
  tr,
  track,
  u,
  ul,
  var_,
  video,
  wbr,
} from "./elements";

/**
 * Render a widget in the `body` element of the current document.
 *
 * @param widget the top-level widget of your application.
 */
export function mainWidget(widget: Widget<void>): void {
  return renderWidget(document.body, widget);
}

/**
 * Render a widget inside a specific rootElement.
 *
 * @param rootElement an HTML element that will contain your application's DOMstructure.
 * @param widget the top-level widget of your application.
 */
export function renderWidget(
  rootElement: HTMLElement,
  widget: Widget<void>,
): void {
  if (!Transaction.currentTransaction) {
    throw new Error("renderWidget must be called in a Sodium transaction");
  }
  const builder = DomBuilder();
  renderWidgetInternal(builder, widget);
  Transaction.currentTransaction.post(0, () => {
    const performWork = builder.collectWork();
    performWork({ rootElement });
  });
}
